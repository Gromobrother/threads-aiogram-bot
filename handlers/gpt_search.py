from aiogram import Router, types
from aiogram.filters import BaseFilter
from openai import AsyncOpenAI
import os

# üìå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä Router
router = Router()

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai_key = os.getenv("OPENAI_API_KEY")
openai_client = AsyncOpenAI(api_key=openai_key)

# üîç –§–∏–ª—å—Ç—Ä: –Ω–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ –±–æ—Ç—ã
class FreeTextFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        return bool(message.text) and not message.text.startswith("/") and not message.via_bot

# üì© –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(FreeTextFilter())
async def handle_free_text(message: types.Message):
    user_text = message.text

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã helpful assistant –≤ Telegram-—á–∞—Ç–µ –ø–æ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω—É. –õ—é–¥–∏ –∏—â—É—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –∏–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –±–∞–∑—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç."},
                {"role": "user", "content": user_text}
            ]
        )

        reply_text = response.choices[0].message.content.strip()
        await message.reply(reply_text)

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT üõ†Ô∏è\n" + str(e))
