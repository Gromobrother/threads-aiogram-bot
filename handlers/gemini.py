# handlers/gemini.py
from aiogram import Router, types, F
import google.generativeai as genai
import os

router = Router()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

model = genai.GenerativeModel("gemini-pro")

@router.message(F.text.startswith("/gemini"))
async def gemini_command(message: types.Message):
    user_input = message.text.removeprefix("/gemini").strip()

    if not user_input:
        await message.reply("üîπ –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /gemini ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: /gemini —á–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è frontend –æ—Ç backend")
        return

    await message.answer("‚è≥ –î—É–º–∞—é...")

    try:
        response = model.generate_content(user_input)
        await message.reply(response.text)
    except Exception as e:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini.")
        print("Gemini error:", e)
