import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import ChatMemberUpdatedFilter, JOIN_TRANSITION
from dotenv import load_dotenv

from handlers import registration, gpt, search, mute
from handlers.gpt_search import gpt_search
from handlers.gpt_command import router as gpt_command
from database.db import create_tables

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def on_user_join(event: types.ChatMemberUpdated, bot: Bot):
    if event.new_chat_member.status == "member":
        await bot.send_message(
            chat_id=event.chat.id,
            text=(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {event.new_chat_member.user.first_name}!\n"
                "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n\nüëâ /reg\n\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –Ω–∞–π—Ç–∏ —Ç–µ–±—è –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ üòâ"
            )
        )

async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    # –°–ª—É—à–∞–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    dp.chat_member.register(on_user_join, ChatMemberUpdatedFilter(JOIN_TRANSITION))

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_routers(
        registration,
        gpt,
        search,
        mute,
        gpt_search,
        gpt_command  # ‚úÖ —ç—Ç–æ –¥–ª—è /gpt
    )

    await create_tables()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
